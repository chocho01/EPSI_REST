{
  "name": "express-validation-swagger",
  "version": "0.1.5",
  "description": "express-validation-swagger generates a V1 swagger enabled client using simple conventions.",
  "homepage": "https://github.com/andrewkeig/express-validation-swagger",
  "author": {
    "name": "Andrew Keig",
    "email": "andrew.keig@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andrewkeig/express-validation-swagger.git"
  },
  "dependencies": {
    "consolidate": "^0.10.0",
    "express": "^4.9.5",
    "json-file-plus": "^1.0.7",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "body-parser": "^1.9.0",
    "express-validation": "^0.2.4",
    "grunt": "^0.4.5",
    "grunt-cafe-mocha": "^0.1.13",
    "grunt-contrib-jshint": "^0.10.0",
    "handlebars": "^2.0.0",
    "joi": "^4.7.0",
    "request": "^2.44.0"
  },
  "keywords": [
    "swagger",
    "express",
    "api",
    "testing",
    "api testing"
  ],
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrewkeig/express-validation-swagger/issues"
  },
  "readme": "express-validation-swagger\n==================\n\n`express-validation-swagger` generates a V1 swagger enabled client.  \n\n`express-validation-swagger` optionally uses `express-validation` to define the rules around API parameters (api payload).  `express-validation` can be configured to validate those rules.\n\n\n# install\n\n### install express-validation-swagger\n\n```npm install express-validation-swagger ```\n\n\n####  install express-validation\n\nIn order to validate your routes and define the parameters and payload for your API, install [express-validation](https://www.npmjs.org/package/express-validation \"express-validation\").  This is optional, and only required if you would like to validate your swagger/express api.\n\n\n```npm install express-validation ```\n\n\n### install swagger-ui\nYou will need to install the swagger client; which contains the html pages that support a swagger api [swagger-ui](https://www.npmjs.org/package/swagger-ui \"swagger-ui\")\n\n\n```npm install swagger-ui ```\n\n# setup\n\n\n```\nvar swagger = require('express-validation-swagger');\n\nswagger(app, {\n  title : 'swagger api', \n  statics : '/test/public/swagger/',  \n  resources : '/test/swagger/', \n  applicationUrl : 'http://127.0.0.1:3000',\n  version : '0.1.5',\n  routes : [\n    { \n      route : 'user', \n      method : 'GET', \n      path: '/user', \n      validation : validation.user.get, \n      options : {\n        responseMessages : [\n          {code: 500, message: \"Internal server error\"},\n          {code: 400, message: \"Bad request\" },\n          {code: 404, message: \"Not found\" }\n        ],\n        description : 'get a user by user id', \n        consumes : [\"application/json\"],\n        produces : [\"application/json\"]  \n      }\n    },\n    { route : 'user', method : 'POST',   path: '/user', validation : validation.user.post },\n    { route : 'user', method : 'DELETE', path: '/user', validation : validation.user.del },\n    { route : 'user', method : 'PUT',    path: '/user', validation : validation.user.put }\n  ]\n});\n```\n\n\n### add swagger to your express application\n\n1. `title` is the name given to th swagger web site\n2. `statics` is the location of the swagger-ui client files\n3. `resources` is the location of your generated swagger resource files\n4. `applicationUrl` is the url of your application, this is inserted into the swagger client \n5. `version` api version number\n6. `routes` contains an array of routes \n \n\n### route definition\n\n1. `route` name of the verb group of routes\n2. `method` 'GET|PUT|POST|DELETE', \n3. `path` path to the api endpoint\n4. `validation` : optional - validation block using `express-validation`, see below on how to set these up.\n\n### route options\n\nYou may also override the following route options:\n\n1. `responseMessages` list of error messages the endpoint can return\n2. `description` of the endpoint\n3. `consumes` what formats the endpoint consumes\n4. `produces` what formats the endpoint produces\n\n\n\n\n### swagger-ui template changes\n\nIn order to specify where to host swagger amend the swagger index.html file, the `url` element should equal `{{applicationUrl}}`.\n\n```\n$(function () {\n  window.swaggerUi = new SwaggerUi({\n  url: \"{{applicationUrl}}\",\n  dom_id: \"swagger-ui-container\",\n  supportedSubmitMethods: ['get', 'post', 'put', 'delete'],\n  onComplete: function(swaggerApi, swaggerUi){\n    if(console) {\n      console.log(\"Loaded SwaggerUI\")\n    }\n    $('pre code').each(function(i, e) {hljs.highlightBlock(e)});\n  },\n  onFailure: function(data) {\n    if(console) {\n      console.log(\"Unable to Load SwaggerUI\");\n      console.log(data);\n    }\n  },\n  docExpansion: \"none\"\n});\n\n```\n\n\n### add express-validation rules\nSimply define a collection of rules; like so; more info here: [express-validation](https://www.npmjs.org/package/express-validation \"express-validation\")\n\n```\nvar validation = { \n  user : { \n    get : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    },\n    post : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n      , body: { username : Joi.string().required() }\n    },\n    del : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    },\n    put : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    }\n  }\n};\n```\n\n#  complete example\n\nHere is a full listing; we also include handlebars so that we can set the ```applicationUrl``` in our ```test/public/swagger/index.html``` file.   The source code contains a working example.\n\nSimply run: \n\n```\nnpm install\nnode test/app.js\n```\nswagger will be hosted here: http://127.0.0.1:3000/swagger\n\n```\nvar express = require('express')\n  , cons = require('consolidate')\n  , http = require('http')\n  , bodyParser = require('body-parser')\n  , swagger = require('../lib/swagger/main')\n  , validate = require('express-validation')\n  , Joi = require('joi')\n  , app = express();\n\napp.engine('html', cons.handlebars);\napp.set('view engine', 'html');\napp.set('views', 'public');\napp.use(bodyParser.json())\n\nvar validation = { \n  user : { \n    get : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    },\n    post : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }, \n      body: { username : Joi.string().required() }\n    },\n    del : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    },\n    put : { \n      headers: { userid : Joi.string().required().regex(/^[0-9a-fA-F]{24}$/) }\n    }\n  }\n};\n\nvar services = {\n  user : {\n    get : function (req, res, next) {\n      var user = { \"userId\" : \"530d1d22be018c1121025be1\", \"name\" : \"airasoul\" };\n      res.status(200).json(user)\n    },\n    post : function (req, res, next) {\n      var user = { \"userId\" : \"530d1d22be018c1121025be1\", \"name\" : \"airasoul\" };\n      res.status(200).json(user)\n    },\n    del : function (req, res, next) {\n      var user = { \"userId\" : \"530d1d22be018c1121025be1\", \"name\" : \"airasoul\" };\n      res.status(200).json(user)\n    },\n    put : function (req, res, next) {\n      var user = { \"userId\" : \"530d1d22be018c1121025be1\", \"name\" : \"airasoul\" };\n      res.status(200).json(user)\n    }\n  }\n}\n\napp.get('/user', validate(validation.user.get),  services.user.get);\napp.post('/user', validate(validation.user.post),  services.user.post );\napp.delete('/user', validate(validation.user.del),   services.user.del);\napp.put('/user', validate(validation.user.put),   services.user.put);\n\nswagger(app, {\n  title : 'swagger api', \n  statics : '/test/public/swagger/',  \n  resources : '/test/swagger/', \n  applicationUrl : 'http://127.0.0.1:3000',\n  version : '0.1.5',\n  routes : [\n    { \n      route : 'user', \n      method : 'GET', \n      path: '/user', \n      validation : validation.user.get, \n      options : {\n        responseMessages : [\n          {code: 500, message: \"Internal server error\"},\n          {code: 400, message: \"Bad request\" },\n          {code: 404, message: \"Not found\" }\n        ],\n        description : 'get a user by user id', \n        consumes : [\"application/json\"],\n        produces : [\"application/json\"]  \n      }\n    },\n    { route : 'user', method : 'POST',   path: '/user', validation : validation.user.post },\n    { route : 'user', method : 'DELETE', path: '/user', validation : validation.user.del },\n    { route : 'user', method : 'PUT',    path: '/user', validation : validation.user.put }\n  ]\n});\n\nhttp.createServer(app).listen(3000);\nmodule.exports = app;\n\n```\n\n\n## run test\nStart the test express application:\n\n```node test/app.js```\n\nNow run the tests:\n\n```grunt test```\n\n.",
  "_id": "express-validation-swagger@0.1.5",
  "dist": {
    "shasum": "c6aaa99cf8bfdcac4cab3fa9a557431c27d03f44"
  },
  "_from": "express-validation-swagger@",
  "_resolved": "https://registry.npmjs.org/express-validation-swagger/-/express-validation-swagger-0.1.5.tgz"
}
