{
  "name": "express-validation",
  "version": "0.3.0",
  "author": {
    "name": "Andrew Keig",
    "email": "andrew.keig@gmail.com"
  },
  "description": "express-validation is a middleware that validates the body, params, query, headers of a request and returns a response with errors; if any of the configured validation rules fail.",
  "homepage": "https://github.com/andrewkeig/express-validation",
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewkeig/express-validation"
  },
  "dependencies": {
    "joi": "^4.7.0",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "body-parser": "^1.3.0",
    "express": "~4.x",
    "jshint": "^2.5.3",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "scripts": {
    "pretest": "jshint lib",
    "test": "jshint lib && mocha -R spec"
  },
  "engines": {
    "node": "*"
  },
  "main": "./lib/index",
  "keywords": [
    "express",
    "validation",
    "validate"
  ],
  "bugs": {
    "url": "https://github.com/andrewkeig/express-validation/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/andrewkeig/express-validation/raw/master/LICENSE"
    }
  ],
  "readme": "express-validation\n==================\n\nexpress-validation is a middleware that validates the body, params, query, headers of a request and returns a response with errors; if any of the configured validation rules fail.\n\n[![build status](https://travis-ci.org/AndrewKeig/express-validation.svg)](http://travis-ci.org/andrewkeig/express-validation)\n\n#install\n\n```\nnpm install express-validation --save\n```\n\n\n#supporting\n\nexpress-validation supports validating the followig: \n\n- body\n- params\n- query\n- headers\n\n#setup\nIn order to setup and use express-validation consider the following simple express application.  It has a single route; configured to use the ```express-validation``` middleware; it accepts as input ```validation.login```; which are the validation rules we have defined for this route.\n\n####Note: prior to version 0.3.0, we returned a json error response straight out of the middleware, this changed in 0.3.0, so you will need to add an express error handler.\n\n```\nvar express = require('express')\n  , validate = require('express-validation')\n  , http = require('http') \n  , validation = require('./validation')\n  , app = express();\nI\napp.use(express.bodyParser());\napp.set('port', 3000);\n\napp.post('/login', validate(validation.login), function(req, res){\n    res.json(200);\n});\n\n//error handler, required as of 0.3.0\napp.use(function(err, req, res, next){\n  res.status(400).json(err);\n});\n\nhttp.createServer(app);\n```\n\n\nThe following segment defines our validation rules ```validation.login```.  Its simply an object, which uses [https://github.com/spumko/joi](https://github.com/spumko/joi) to define validation rules for a request.\n\nWe have defined two rules ```email``` and ```password```.  They are encapsulated inside ```body```; which is important; as this defines their location, alternatives being, ```params```, ```query```, ```headers```.\n\n```\nvar Joi = require('joi');\n\nmodule.exports = {\n  body: {\n    email: Joi.string().email().required(),\n    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/).required()\n  }\n};\n```\n\nThe following test, calls the route defined in our express application ```/login```; it passes in a payload with an ```email``` and empty ```password```.  \n\n```\ndescribe('when the request has a missing item in payload', function () {\n  it('should return a 400 ok response and a single error', function(done){\n\n    var login = {\n        email: \"andrew.keig@gmail.com\",\n        password: \"\"\n    };\n\n    request(app)\n      .post('/login')\n      .send(login)\n      .expect(400)\n      .end(function (err, res) {\n        var response = JSON.parse(res.text);\n        response.errors.length.should.equal(1);\n        response.errors[0].messages.length.should.equal(2);\n        done();\n      });\n    });\n});\n```\n\nRunning the above test will produce the following response.\n\n```\n{\n  \"status\": 400,\n  \"statusText\": \"Bad Request\",\n  \"errors\": [\n    {\n      \"field\": \"password\",\n      \"location\": \"body\",\n      \"messages\": [\n        \"the value of password is not allowed to be empty\",\n        \"the value of password must match the regular expression /[a-zA-Z0-9]{3,30}/\"\n      ]\n    }\n  ]\n}\n```\n\nIf you would prefer to simply return a lis of errors; you can flatten this structure; by passing an options array; with flatten set to true:\n\n```\nmodule.exports.post = {\n  options : { flatten : true },\n  body: {\n    email: Joi.string().email().required(),\n    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/).required()\n  }\n};\n```\n\nThis will produce the following response; an array of strings.\n\n\n```\n[\n  \"the value of password is not allowed to be empty\",\n  \"the value of password must match the regular expression /[a-zA-Z0-9]{3,30}/\"\n]\n\n```\n\nBy default, additional items outside of the schema definition will be allowed to pass\nvalidation.  To enforce strict checking, set the `allowUnknown\\*` options as follows:\n\n```\nmodule.exports.post = {\n  options : { \n    allowUnknownBody: false, \n    allowUnknownHeaders: false,\n    allowUnknownQuery: false, \n    allowUnknownParams: false },\n  ...\n};\n```\n\n#issues with headers\nWhen creating a validation object that checks ```req.headers```; please remember to use lowercase names; node.js will convert incoming headers to lowercase:\n\n\n```\nvar Joi = require('joi');\n\nmodule.exports = {\n  headers: {\n    accesstoken: Joi.string().required(),\n    userid : Joi.string().required()\n  }\n};\n```\n",
  "readmeFilename": "README.md",
  "_id": "express-validation@0.3.0",
  "dist": {
    "shasum": "21ba8fae4c8d0ad7643b608d1564a0ef1e5442fb"
  },
  "_from": "express-validation@",
  "_resolved": "https://registry.npmjs.org/express-validation/-/express-validation-0.3.0.tgz"
}
